CPU 6502
OUTPUT HEX

; Vectors
NMI_VECT equ 0xFFFA
IRQ_VECT equ 0xFFFE
RST_VECT equ 0xFFFC

; Memory
ROM_BEGIN equ 0xE000
RAM_BEGIN equ 0x0000

; I/O
EXT1_BASE equ 0x2000
EXT2_BASE equ 0x4000
EXT3_BASE equ 0x6000
EXT4_BASE equ 0x8000
EXT5_BASE equ 0xA000

KEYB_BASE equ 0xC000
SCRN_BASE equ 0xC400
NMI_CLR   equ 0xC800
GPIO_BASE equ 0xCC00

; Key codes
KEY_INC  equ 16
KEY_DEC  equ 17
KEY_SEL  equ 18
KEY_GO   equ 19
KEY_F1   equ 20
KEY_F2   equ 21
KEY_F3   equ 22
KEY_F4   equ 23
KEY_NONE equ 24

; Time base
NMI_HZ       equ 1024
KEYB_COOLDWN equ 50

; Misc
ROM_ZP      equ 0xD0
ROM_MAGIC   equ 0x4B41
SCRN_LENGTH equ 12


JSR_IND MACRO
        LDA #(\2 - 1) >> 8
        PHA
        LDA #(\2 - 1) & 0xFF
        PHA
        JMP (\1)
ENDM


DUMMY

; Zero page variables
* = RAM_BEGIN + ROM_ZP

; Accessed by NMI
init_done       ds 1 ; 0 - init done, others - NMI shouldn't do it's tasks

keycode         ds 1
keycode_prev    ds 1
key_cooldown    ds 1

jiffies         ds 2 ; Only for NMI use - non-atomic access
time_s          ds 1

; Not accessed by NMI

temp            ds 16
sleep_temp0     ds 1
sleep_temp1     ds 1

scrnptr         ds 1

address         ds 2
mode_sel        ds 1
key_pressed     ds 1

irq_ptr         ds 2
irq_valid       ds 1

nmi_ptr         ds 2
nmi_valid       ds 1

autoinc         ds 1
autoinc_cnt     ds 1

ram_size        ds 2
mem_err         ds 1

copy_src        ds 2
copy_len        ds 2


CODE

* = ROM_BEGIN

; BIOS function table
                JMP reset_warm          ; void reset(void)
                RTS
                JMP irq_register        ; void irq_register(irq_addr (X, Y))
                RTS
                JMP nmi_register        ; void nmi_register(irq_addr (X, Y))
                RTS
                JMP clear_screen        ; void clear_screen(void)
                RTS
                JMP set_screen_pos      ; void set_screen_pos(position (A))
                RTS
                JMP putch               ; void putch(character (A))
                RTS
                JMP putbyte             ; void putbyte(byte (A))
                RTS
                JMP printx_u16          ; void printx_u16(number (X, Y))
                RTS
                JMP printd_u16          ; void printd_u16(number (X, Y))
                RTS
                JMP printd_s16          ; void printd_s16(number (X, Y))
                RTS
                JMP prints              ; void prints(address (X, Y))
                RTS
                JMP scanx_u16           ; number (X, Y) scanx_u16(void)
                RTS
                JMP scand_u16           ; number (X, Y) scand_u16(void)
                RTS
                JMP get_key             ; key_code (A) get_key(void)
                RTS
                JMP get_key_nb          ; key_code (A) get_key_nb(void)
                RTS
                JMP get_jiffies         ; jffies (A) get_jiffies(void)
                RTS
                JMP get_seconds         ; seconds (A) get_seconds(void)
                RTS
                JMP msleep              ; void msleep(time (A))
                RTS
                JMP sleep               ; void sleep(time (A))
                RTS


; "Business" code, handling user inputs, monitor functionality


; Function printd_s16
; Display signed 16-bit decimal digit on the screen
; Input: X, Y - number. Output: none.
; Destroys: A, X, Y, temp.
printd_s16      TYA
                BPL printd_u16          ; Just call printd_u16 if positive
                STX temp                ; Otherwise negate the number
                LDA #0xFF               ; to get the positive.
                EOR temp
                CLC
                ADC #1
                TAX
                STY temp
                LDA #0xFF
                EOR temp
                ADC #0
                TAY
                JSR printd_u16
                LDX #6                  ; Find screen position for minus sign
printd_s16_l    LDA screen, X
                AND #0x7F
                BEQ printd_s16_e
                DEX
                CPX #2
                BPL printd_s16_l
printd_s16_e    LDA #0x40               ; minus sign
                STA screen, X
                RTS


; Function printd_u16_pb
; Same as putbyte, but skip leading zeroes
; Input: A - number. Output: none.
; Destroys: temp + 3.
printd_u16_pb   PHA
                LDA temp + 3
                BNE printd_u16_pbj      ; zeroes skipped, just do putbyte

                PLA
                BEQ printd_u16_pbb      ; zeroes not skipped, we go zeroes, do nothing

                PHA
                AND #0xF0
                BNE printd_u16_ps0

                INX
                PLA
                JSR putch
                INX

                LDA #0xFF               ; zeroes skipped
                STA temp + 3
                RTS

printd_u16_ps0  LDA #0xFF               ; non-zero on MSB, set flag and go to putbyte
                STA temp + 3

printd_u16_pbj  PLA
                JMP putbyte

printd_u16_pbb  INX
                INX
                RTS


; Function printd_u16
; Display unsigned 16-bit decimal digit on the screen
; Based on double-dabble algorithm
; Input: X, Y - number. Output: none.
; Destroys: A, X, Y, temp.
printd_u16      LDA #0
                STA temp
                STA temp + 1
                STA temp + 2
                STY temp + 3
                STX temp + 4
                LDY #15
printd_u16_l0   LDX #2                  ; loop 3 - check all nibbles if < 5
printd_u16_l2   LDA temp, X             ; add 3 otherwise
                AND #0x0F
                CMP #0x05
                BMI printd_u16_l2s
                LDA temp, X
                CLC
                ADC #0x03
                STA temp, X
printd_u16_l2s  LDA temp, X
                AND #0xF0
                CMP #0x50
                BMI printd_u16_l2e
                LDA temp, X
                CLC
                ADC #0x30
                STA temp, X
printd_u16_l2e  DEX
                BPL printd_u16_l2

                CLC                     ; loop 1 - shift 16 times
                LDX #4                  ; loop 2 - shift all left once
printd_u16_l1   ROL temp, X
                DEX
                BPL printd_u16_l1

                DEY
                BPL printd_u16_l0

                LDA #0
                STA temp + 3            ; set zeroes non skipped flag

                LDX #2                  ; print whole the number (justified to the right)
                LDA temp
                JSR printd_u16_pb
                LDA temp + 1
                JSR printd_u16_pb
                LDA temp + 2
                JSR printd_u16_pb

                LDA temp + 3
                BNE printd_u16_l3e      ; have we got all zeroes and skipped whole number?

                LDA #0
                LDX #7
                JSR putch

printd_u16_l3e  RTS


; Function printx_u16
; Display unsigned 16-bit hexadecimal digit on the screen
; Input: X, Y - number. Output: none.
; Destroys: A, X.
printx_u16      TXA
                PHA
                TYA
                JSR putbyte
                PLA
                JSR putbyte
                RTS


; Function prints
; Display decoced 7 segment char until NULL
; Input: X, Y - pointer to string, A - starting pos. Output: screen.
; Destroys: A, X, Y, temp.
prints          STX temp
                STY temp + 1
                LDY screenptr

prints_l        LDA (temp), Y
                BEQ prints_e
                JSR putch
                INY
                JMP prints_l

prints_e        RTS


; Function scanx_u16
; Gets user input as an unsigned 16-bit hex number
; Input: none. Output: X, Y - number.
; Destroys: A, X, Y.
scanx_u16       LDA #0
                LDX #7
scanx_u16_c     STA screen, X
                DEX
                CPX #3
                BNE scanx_u16_c
                LDA #0
                STA temp
                STA temp + 1
scanx_u16_l0    LDX temp
                LDY temp + 1
                JSR printx_u16
scanx_u16_l1    JSR get_key
                CMP #KEY_GO
                BEQ scanx_u16_e
                CMP #16
                BPL scanx_u16_l1
                ASL A
                ASL A
                ASL A
                ASL A
                LDX #3
scanx_u16_l2    ROL A
                ROL temp
                ROL temp + 1
                DEX
                BPL scanx_u16_l2
                BMI scanx_u16_l0
scanx_u16_e     JSR clear_screen
                LDX temp
                LDY temp + 1
                RTS


; Function scand_u16
; Gets user input as an unsigned 16-bit decimal number
; Input: none. Output: X, Y - number.
; Destroys: A, X, Y.
scand_u16       LDA #0
                LDX #4
scand_u16_l0    STA temp, X             ; init to zeroes
                DEX
                BPL scand_u16_l0

scand_u16_l1    LDA #0
                LDX #7
scand_u16_cl    STA screen, X
                DEX
                CPX #2
                BNE scand_u16_cl

                LDY #0
scand_u16_l2    LDA temp, Y             ; skip leading zeroes
                BNE scand_u16_s0
                INY
                CPY #4
                BMI scand_u16_l2

scand_u16_s0    TYA
                CLC
                ADC #3                  ; convert temp index to screen pos
                TAX

scand_u16_l3    TYA
                PHA
                LDA temp, Y             ; print current number
                JSR putch
                PLA
                TAY
                INY
                INX
                CPX #8
                BMI scand_u16_l3

scand_u16_l4    JSR get_key             ; wait for valid input
                CMP #KEY_GO
                BEQ scand_u16_e
                CMP #KEY_DEC
                BEQ scand_u16_bs
                CMP #10
                BPL scand_u16_l4
                PHA
                LDA temp
                BEQ scand_u16_s1
                PLA
                JMP scand_u16_l4        ; we already have 5 digits

scand_u16_s1    LDX #0
scand_u16_s1l0  LDA temp + 1, X         ; shift all left and store new digit
                STA temp, X
                INX
                CPX #4
                BMI scand_u16_s1l0
                PLA
                STA temp + 4
                JMP scand_u16_l1

scand_u16_bs    LDX #3
scand_u16_bsl0  LDA temp, X             ; shift all right
                STA temp + 1, X
                DEX
                BPL scand_u16_bsl0
                LDA #0
                STA temp
                JMP scand_u16_l1

scand_u16_e     LDX #3                  ; first convert the buffer to packed BCD
scand_u16_el0   ASL temp + 4
                DEX
                BPL scand_u16_el0

                LDX #3
scand_u16_el1   ROL temp + 4
                ROL temp + 3
                DEX
                BPL scand_u16_el1

                LDX #3
scand_u16_el2   ASL temp + 2
                DEX
                BPL scand_u16_el2

                LDX #3
scand_u16_el3   ROL temp + 2
                ROL temp + 1
                DEX
                BPL scand_u16_el3

                LDA temp + 3
                STA temp + 2

                LDA #0
                STA temp + 3
                STA temp + 4

                LDY #15                 ; Reverse double dabble

scand_u16_el4   CLC
                ROR temp
                ROR temp + 1
                ROR temp + 2
                ROR temp + 3
                ROR temp + 4

                LDX #2
scand_u16_el5   LDA temp, X
                AND #0x0F
                CMP #7
                BMI scand_u16_es0

                LDA temp, X
                SEC
                SBC #3
                STA temp, X

scand_u16_es0   LDA temp, X
                AND #0xF0
                CMP #0x70
                BMI scand_u16_es1

                LDA temp, X
                SEC
                SBC #0x30
                STA temp, X

scand_u16_es1   DEX
                BPL scand_u16_el5

                DEY
                BPL scand_u16_el4

                JSR clear_screen
                LDX temp + 4
                LDY temp + 3
                RTS


; Function clear_screen
; Clears screen (blank display)
; Input: none. Output: none.
; Destroys: A, X.
clear_screen    LDA #0
                LDX #SCRN_LENGTH - 1
clear_screen_l  STA SCRN_BASE, X
                DEX
                BPL clear_screen_l
                RTS


; Function msleep
; Sleep for 0-255 ms
; Input: A - sleep time in ~1ms. Output: none.
; Destroys: A, sleep_temp0, sleep_temp1.
msleep          STA sleep_temp0
                LDA jiffies
                STA sleep_temp1
msleep_loop     LDA jiffies
                SEC
                SBC sleep_temp1
                CMP sleep_temp0
                BCC msleep_loop
                RTS


; Function sleep
; Sleep for 0-255 s
; Input: A - sleep time in 1s. Output: none.
; Destroys: A, sleep_temp0, sleep_temp1.
sleep           STA sleep_temp0
                LDA time_s
                STA sleep_temp1
sleep_loop      LDA time_s
                SEC
                SBC sleep_temp1
                CMP sleep_temp0
                BCC sleep_loop
                RTS


; Function get_jiffies
; Fetches 8-bit ~1ms period timer
; Input: none. Output: A - jiffies.
; Destroys: A.
get_jiffies     LDA jiffies
                RTS


; Function get_seconds
; Fetches 8-bit 1s period timer
; Input: none. Output: A - seconds.
; Destroys: A.
get_seconds     LDA time_s
                RTS


; Function irq_register
; Registers user IRQ handler
; Input: X, Y - irq handler pointer. Output: none.
; Destroys: A.
irq_register    LDA #0
                STA irq_valid
                STX irq_ptr
                STY irq_ptr + 1
                LDA #1
                STA irq_valid
                CLI
                RTS


; Function nmi_register
; Registers user NMI handler
; Input: X, Y - nmi handler pointer. Output: none.
; Destroys: A.
nmi_register    LDA #0
                STA nmi_valid
                STX nmi_ptr
                STY nmi_ptr + 1
                LDA #1
                STA nmi_valid
                RTS


; Function set_screen_pos
; Set current screen position
; Input: A - position. Output: None.
; Destroys: None.
set_screen_pos  STA screenptr
                RTS


; Function putch
; Updates one char on the screen.
; Input: A - char. Output: screen.
; Destroys: X.
putch           LDX screenptr
                CPX #SCRN_LENGTH
                BCC putch_e
                STA SCRN_BASE, X
                INX
                STX screenptr
putch_e         RTS


; Function putbyte
; Updates byte char on the screen.
; Input: A - byte. Output: screen.
; Destroys: None
putbyte         PHA
                LSR A
                LSR A
                LSR A
                LSR A
                JSR putch
                PLA
                AND #0x0F
                JSR putch
                RTS


main_screen_str     asc "MEM "
mode_addr_str       asc "< "
mode_data_str       asc " >"
mode_autoinc_str    asc "<>"


; Function draw_screen
; Updates screen - current address and memory value.
; Input: address, mode_sel. Output: screen.
; Destroys: A, X, Y.
draw_screen     LDA #0
                STA screenptr

                LDX #main_screen_str & 0xFF
                LDY #main_screen_str >> 8
                JSR prints

                LDX #address & 0xFF
                LDY #address >> 8
                JSR printx_u16

                LDA mode_sel
                BEQ draw_screen_d

                LDX #mode_addr_str & 0xFF
                LDY #mode_addr_str >> 8
                JSR prints

                JMP draw_screen_e

draw_screen_d   LDA autoinc
                BEQ draw_screen_a

                LDX #mode_data_str & 0xFF
                LDY #mode_data_str >> 8
                JSR prints

                JMP draw_screen_e

draw_screen_a   LDX #mode_autoinc_str & 0xFF
                LDY #mode_autoinc_str >> 8
                JSR prints

draw_screen_e   LDY #0
                LDA (address), Y
                JSR putbyte

                RTS


; Function get_key_nb
; Get key code (non blocking)
; Input: none. Output: A - key code.
; Destroys: A
get_key_nb      LDA keycode
                RTS


; Function get_key
; Blocks until a key is pressed
; Input: none. Output: A - key code.
; Destroys: A.
get_key         LDA keycode
                CMP #KEY_NONE
                BNE get_key             ; wait for no key pressed
get_key_l1      LDA keycode
                CMP #KEY_NONE
                BEQ get_key_l1          ; wait for a key press
                RTS


; Function usr_memclr
; Clears user memory (user ZP + rest of the RAM)
; Input: none. Output: none
; Destroys: A, X, Y, temp, temp + 1.
usr_memclr      LDX #ROM_ZP - 1
                LDA #0
usr_memclr_l0   STA 0, X
                DEX
                CPX #0xFF
                BNE usr_memclr_l0

                LDA #0x00
                STA temp
                LDA #0x02
                STA temp + 1
                LDY #0
usr_memclr_l1   LDA #0
usr_memclr_l2   STA (temp), Y
                INC temp
                BNE usr_memclr_l2
                INC temp + 1
                LDA temp + 1
                CMP ram_size + 1
                BCC usr_memclr_l1

                RTS


; Strings
welcome_str     asc "POCKET265"
copyright_str   asc "A.K. 2022"
err_str         asc "ERROR"
usr_str         asc "USER "
src_str         asc "SOURCE "
len_str         asc "LENGTH "


; Function reset
; Entry point.
reset           LDA #0xff
                STA init_done

                SEI
                CLD

                ; Clear screen control registers
                LDA #0
                STA SCRN_BASE

                ; Memory test
                LDX #0
memtest_zp0     LDA #0xAA
                STA 0, X
                CMP 0, X
                BNE memtest_zperr
                LDA #0x55
                STA 0, X
                CMP 0, X
                BNE memtest_zperr
                INX
                BNE memtest_zp0
                BEQ memtest_zpnerr

memtest_zperr   LDA #0xFF
                BNE memtest_zpe

memtest_zpnerr  LDA #0
memtest_zpe     STA mem_err

                ; Don't test the stack area - NMI is still coming
memtest_mem     LDA #0xFF
                STA 0                   ; ZP access marker
                LDA #0
                STA ram_size
                LDA #2
                STA ram_size + 1
                LDX #0
memtest_meml1   LDA #0xAA
                STA (ram_size, X)
                CMP (ram_size, X)
                BNE memtest_end
                LDA #0x55
                STA (ram_size, X)
                CMP (ram_size, X)
                BNE memtest_end
                LDA #0xFF
                CMP 0
                BNE memtest_end         ; ZP has been written to - RAM aliasing detected
                INC ram_size
                BNE memtest_meml1
                INC ram_size + 1
                JMP memtest_meml1

                ; Zero out user RAM
memtest_end     JSR usr_memclr

reset_warm      SEI
                CLD

                ; Setup stack
                LDX #0xFF
                TXS

                ; Init variables

                ; Keycode
                LDA #KEY_NONE
                STA keycode
                STA keycode_prev
                LDA #0
                STA key_cooldown
                STA key_pressed

                ; Jiffies, timers
                STA jiffies
                STA jiffies + 1
                STA time_s

                ; Auto increment feature default off
                STA autoinc
                STA autoinc_cnt
                STA mode_sel

                ; User IRQ and NMI handling
                STA irq_ptr
                STA irq_ptr + 1
                STA irq_valid
                STA nmi_ptr
                STA nmi_ptr + 1
                STA nmi_valid

                ; Address
                STA address
                LDA #0x02
                STA address + 1

                JSR clear_screen

                ; Init done!
                LDA #0
                STA init_done
                STA NMI_CLR

                ; Welcome screen
                LDX #welcome_str & 0xFF
                LDY #welcome_str >> 8
                JSR prints

                LDA #1
                JSR sleep

                LDA #0
                STA scrnptr

                ; Copyright screen
                LDX #copyright_str & 0xFF
                LDY #copyright_str >> 8
                JSR prints

                LDA #1
                JSR sleep

                LDA #0
                STA scrnptr

                ; ZP access ok?
                LDA mem_err
                BEQ reset_noerr
                LDX #err_str & 0xFF
                LDY #err_str >> 8
                LDA #0
                JSR prints
reset_err       JMP reset_err

                ; Display memory size
reset_noerr     LDX #usr_str & 0xFF
                LDY #usr_str >> 8
                JSR prints

                LDX ram_size
                LDY ram_size + 1
                JSR printd_u16

                LDA #1
                JSR sleep

                LDA #0
                STA scrnptr

main_loop       JSR draw_screen
                JSR get_key_nb
                CMP #KEY_NONE
                BNE main_loop_s0
                LDA #0
                STA key_pressed
                JMP main_loop

main_loop_s0    LDX key_pressed
                CPX #0
                BNE main_loop
                INC key_pressed

                CMP #16
                BPL main_inc

                ; 0-F key pressed - edit one digit
                PHA
                LDA mode_sel
                CMP #0
                BEQ main_edit_b

                ; Edit address
                CLC
                ROL address
                ROL address + 1
                CLC
                ROL address
                ROL address + 1
                CLC
                ROL address
                ROL address + 1
                CLC
                ROL address
                ROL address + 1
                PLA
                ORA address
                STA address
                JMP main_loop

main_edit_b     LDY #0
                LDA (address), Y
                ASL A
                ASL A
                ASL A
                ASL A
                STA temp
                PLA
                ORA temp
                STA (address), Y

                LDA autoinc
                BEQ main_loop

                INC autoinc_cnt
                LDA autoinc_cnt
                CMP #2
                BNE main_loop

                LDA #0
                STA autoinc_cnt

                LDA #KEY_INC ; so we'll do main_inc below

main_inc        CMP #KEY_INC
                BNE main_dec

                ; INC key pressed - increment address
                INC address
                BNE main_loop
                INC address + 1
                JMP main_loop

main_dec        CMP #KEY_DEC
                BNE main_sel

                ; DEC key pressed - decrement address
                DEC address
                LDA address
                CMP #0xFF
                BNE main_loop
                DEC address + 1
                JMP main_loop

main_sel        CMP #KEY_SEL
                BNE main_go

                ; SEL key pressed - change edit mode
                LDA #1
                EOR mode_sel
                STA mode_sel
                JMP main_loop

main_go         CMP #KEY_GO
                BNE main_f1

                ; GO key pressed - execute user program
                JSR clear_screen
                JSR_IND address, reset_warm

main_f1         CMP #KEY_F1
                BNE main_f2

                ; F1 key pressed - toggle auto increment mode
                LDA #0xFF
                EOR autoinc
                STA autoinc

                LDA #0
                STA autoinc_cnt
                JMP main_loop

main_f2         CMP #KEY_F2
                BNE main_f3

                ; F2 key pressed - clear user memory
                JSR usr_memclr
                JMP main_loop

main_f3         CMP #KEY_F3
                BNE main_f4

                ; F3 key_pressed - copy memory

                ; TODO disabled for now
                JMP main_loop

                JSR clear_screen
                LDX #src_str & 0xff
                LDY #src_str >> 8
                LDA #0
                JSR prints
                JSR scanx_u16
                STX copy_src
                STY copy_src + 1
                LDX #len_str & 0xff
                LDY #len_str >> 8
                LDA #0
                JSR prints
                JSR scanx_u16

                LDA address
                STA temp
                LDA address + 1
                STA temp + 1
                STX temp + 2
                STY temp + 3
                LDY #0
main_f3_l       LDA (copy_src), Y
                STA (temp), Y

                INC copy_src
                BNE main_f3_s0
                INC copy_src + 1

main_f3_s0      INC temp
                BNE main_f3_s1
                INC temp + 1

main_f3_s1      DEC temp + 2
                LDA temp + 2
                CMP #0xFF
                BNE main_f3_l
                DEC temp + 3
                LDA temp + 3
                CMP #0xFF
                BNE main_f3_l

                JMP main_loop

main_f4         CMP #KEY_F4
                BNE main_end

                ; F4 key pressed - TODO

main_end        JMP main_loop


; System functions


; Function irq
; Handles IRQ
; Input: None. Output: None.
; Destroys: None
irq             PHA

                ; Exit if IRQ is not enabled by a user SW
                LDA irq_valid
                BEQ irq_ret

                TYA
                PHA
                TXA
                PHA

                JSR_IND irq_ptr, irq_end

irq_end         PLA
                TAX
                PLA
                TAY
irq_ret         PLA
                RTI


; Function nmi
; Handles NMI - jiffies, keyboard, screen.
; Input: None. Output: None.
; Destroys: None
nmi             PHA
                TYA
                PHA
                TXA
                PHA

                ; Early exit if init is not complete
                ; We cannot disable NMI, so this is needed
                LDA init_done
                BNE nmi_end2

                ; Increment jiffies
                JSR handle_timer

                ; Handle UI
                JSR scan_keyb

                LDA nmi_valid
                BEQ nmi_end1

                JSR_IND nmi_ptr, nmi_end1

                ; Clear NMI to allow a next one to occur
                ; Dummy write to preset 74HC74 flip-flop
nmi_end1        STA NMI_CLR

nmi_end2        PLA
                TAX
                PLA
                TAY
                PLA
                RTI


; Function handle_timer
; Time keeping. Assumption - called every NMI
; Input: jiffies var. Output: jiffies, time_s vars.
; Destroys: A, X.
handle_timer    INC jiffies
                BNE handle_timer_1
                LDX jiffies + 1
                INX
                CPX #NMI_HZ / 256
                BMI handle_timer_0
                INC time_s
                LDX #0
handle_timer_0  STX jiffies + 1
handle_timer_1  RTS


lut_keyb_scan_0  db 0x3E, 0x3D, 0x3B, 0x37, 0x2F, 0x1F
lut_keyb_scan_1  db KEY_F1, 0xC, 0x8, 0x4, 0x0, KEY_INC


; Function scan_keyboard
; Scans whole keyboard, debounces and stores key code in keycode var
; Input: None. Output: keycode.
; Destroys: A, X, Y.
scan_keyb       LDX #5                  ; loop counter
scan_keyb_row_l LDY lut_keyb_scan_0, X  ; row address offset
                LDA KEYB_BASE, Y        ; get row data
                CMP #0xFF               ; is a key pressed on the row?
                BNE scan_keyb_row_f
                DEX
                BPL scan_keyb_row_l     ; are we done?
                LDY #KEY_NONE           ; no key pressed
                BNE scan_keyb_db
scan_keyb_row_f LDY lut_keyb_scan_1, X  ; base key of a row
                CLC                     ; To avoid endless loop, just in case
scan_keyb_col_l ROR A                   ; get next bit into carry
                BCC scan_keyb_db        ; have we found collumn?
                INY                     ; select next key in a row
                BCS scan_keyb_col_l     ; branch always
scan_keyb_db    CPY keycode_prev        ; same key as before?
                BEQ scan_keyb_db_s
                STY keycode_prev
                LDA #KEYB_COOLDWN       ; start new cooldown
                STA key_cooldown
                RTS
scan_keyb_db_s  LDA key_cooldown        ; still the same keycode
                BEQ scan_keyb_db_r      ; deboucing has been done already
                DEC key_cooldown        ; decrement cooldown
                BNE scan_keyb_db_r      ; debouncing done?
                STY keycode             ; update new keycode
scan_keyb_db_r  RTS


; Copyright/version

* = 0xFF80
ASC "Copyright A.K. 2022, github.com/agkaminski/Pocket65, version "
INCLUDE version.inc
DB 0

; Vectors

* = NMI_VECT
dw nmi

* = RST_VECT
dw reset

* = IRQ_VECT
dw irq
